/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface PassesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "balanceOf"
      | "buyPasses"
      | "defaultFactors"
      | "factors"
      | "getBuyPrice"
      | "getBuyPriceAfterFee"
      | "getPrice"
      | "getSellPrice"
      | "getSellPriceAfterFee"
      | "initialize"
      | "managerFeePercentage"
      | "owner"
      | "passesBalance"
      | "passesSupply"
      | "polVault"
      | "protocolFeePercentage"
      | "referralFeePercent"
      | "renounceOwnership"
      | "sellPasses"
      | "setDefaultFactor"
      | "setManagerFeePercentage"
      | "setProtocolFeePercentage"
      | "setReferralFeePercentage"
      | "setTreasury"
      | "shareLots"
      | "stakingToken"
      | "transferOwnership"
      | "treasury"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "ManagerFeePercentageChanged"
      | "OwnershipTransferred"
      | "ProtocolFeePercentageChanged"
      | "ReferralFeePercentageChanged"
      | "Trade"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buyPasses",
    values: [AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultFactors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "factors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyPrice",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyPriceAfterFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellPrice",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSellPriceAfterFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "managerFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "passesBalance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "passesSupply",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "polVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referralFeePercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellPasses",
    values: [AddressLike, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultFactor",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setManagerFeePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferralFeePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "shareLots",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyPasses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultFactors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBuyPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyPriceAfterFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSellPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSellPriceAfterFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "managerFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "passesBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "passesSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "polVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellPasses", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setManagerFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferralFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shareLots", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ManagerFeePercentageChangedEvent {
  export type InputTuple = [feePercentage: BigNumberish];
  export type OutputTuple = [feePercentage: bigint];
  export interface OutputObject {
    feePercentage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtocolFeePercentageChangedEvent {
  export type InputTuple = [feePercentage: BigNumberish];
  export type OutputTuple = [feePercentage: bigint];
  export interface OutputObject {
    feePercentage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralFeePercentageChangedEvent {
  export type InputTuple = [feePercentage: BigNumberish];
  export type OutputTuple = [feePercentage: bigint];
  export interface OutputObject {
    feePercentage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeEvent {
  export type InputTuple = [
    trader: AddressLike,
    manager: AddressLike,
    isBuy: boolean,
    passAmount: BigNumberish,
    beraAmount: BigNumberish,
    protocolBeraAmount: BigNumberish,
    managerBeraAmount: BigNumberish,
    referral: AddressLike,
    referralBeraAmount: BigNumberish,
    supply: BigNumberish,
    factor: BigNumberish
  ];
  export type OutputTuple = [
    trader: string,
    manager: string,
    isBuy: boolean,
    passAmount: bigint,
    beraAmount: bigint,
    protocolBeraAmount: bigint,
    managerBeraAmount: bigint,
    referral: string,
    referralBeraAmount: bigint,
    supply: bigint,
    factor: bigint
  ];
  export interface OutputObject {
    trader: string;
    manager: string;
    isBuy: boolean;
    passAmount: bigint;
    beraAmount: bigint;
    protocolBeraAmount: bigint;
    managerBeraAmount: bigint;
    referral: string;
    referralBeraAmount: bigint;
    supply: bigint;
    factor: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Passes extends BaseContract {
  connect(runner?: ContractRunner | null): Passes;
  waitForDeployment(): Promise<this>;

  interface: PassesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balanceOf: TypedContractMethod<
    [holder: AddressLike, manager: AddressLike],
    [bigint],
    "view"
  >;

  buyPasses: TypedContractMethod<
    [
      manager: AddressLike,
      amount: BigNumberish,
      factor: BigNumberish,
      referral: AddressLike
    ],
    [void],
    "payable"
  >;

  defaultFactors: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  factors: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getBuyPrice: TypedContractMethod<
    [manager: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  getBuyPriceAfterFee: TypedContractMethod<
    [manager: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  getPrice: TypedContractMethod<
    [supply: BigNumberish, amount: BigNumberish, factor: BigNumberish],
    [bigint],
    "view"
  >;

  getSellPrice: TypedContractMethod<
    [manager: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  getSellPriceAfterFee: TypedContractMethod<
    [manager: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  managerFeePercentage: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  passesBalance: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  passesSupply: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  polVault: TypedContractMethod<[], [string], "view">;

  protocolFeePercentage: TypedContractMethod<[], [bigint], "view">;

  referralFeePercent: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sellPasses: TypedContractMethod<
    [
      manager: AddressLike,
      amount: BigNumberish,
      minPrice: BigNumberish,
      referral: AddressLike
    ],
    [void],
    "payable"
  >;

  setDefaultFactor: TypedContractMethod<
    [factor: BigNumberish, status: boolean],
    [void],
    "nonpayable"
  >;

  setManagerFeePercentage: TypedContractMethod<
    [_feePercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  setProtocolFeePercentage: TypedContractMethod<
    [_feePercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  setReferralFeePercentage: TypedContractMethod<
    [_feePercentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTreasury: TypedContractMethod<
    [_treasury: AddressLike],
    [void],
    "nonpayable"
  >;

  shareLots: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish],
    [[bigint, bigint] & { shares: bigint; stakedAmount: bigint }],
    "view"
  >;

  stakingToken: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [holder: AddressLike, manager: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "buyPasses"
  ): TypedContractMethod<
    [
      manager: AddressLike,
      amount: BigNumberish,
      factor: BigNumberish,
      referral: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "defaultFactors"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "factors"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBuyPrice"
  ): TypedContractMethod<
    [manager: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBuyPriceAfterFee"
  ): TypedContractMethod<
    [manager: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<
    [supply: BigNumberish, amount: BigNumberish, factor: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSellPrice"
  ): TypedContractMethod<
    [manager: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSellPriceAfterFee"
  ): TypedContractMethod<
    [manager: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "managerFeePercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "passesBalance"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "passesSupply"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "polVault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolFeePercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "referralFeePercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sellPasses"
  ): TypedContractMethod<
    [
      manager: AddressLike,
      amount: BigNumberish,
      minPrice: BigNumberish,
      referral: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setDefaultFactor"
  ): TypedContractMethod<
    [factor: BigNumberish, status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setManagerFeePercentage"
  ): TypedContractMethod<[_feePercentage: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProtocolFeePercentage"
  ): TypedContractMethod<[_feePercentage: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setReferralFeePercentage"
  ): TypedContractMethod<[_feePercentage: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreasury"
  ): TypedContractMethod<[_treasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "shareLots"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish],
    [[bigint, bigint] & { shares: bigint; stakedAmount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "stakingToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "ManagerFeePercentageChanged"
  ): TypedContractEvent<
    ManagerFeePercentageChangedEvent.InputTuple,
    ManagerFeePercentageChangedEvent.OutputTuple,
    ManagerFeePercentageChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProtocolFeePercentageChanged"
  ): TypedContractEvent<
    ProtocolFeePercentageChangedEvent.InputTuple,
    ProtocolFeePercentageChangedEvent.OutputTuple,
    ProtocolFeePercentageChangedEvent.OutputObject
  >;
  getEvent(
    key: "ReferralFeePercentageChanged"
  ): TypedContractEvent<
    ReferralFeePercentageChangedEvent.InputTuple,
    ReferralFeePercentageChangedEvent.OutputTuple,
    ReferralFeePercentageChangedEvent.OutputObject
  >;
  getEvent(
    key: "Trade"
  ): TypedContractEvent<
    TradeEvent.InputTuple,
    TradeEvent.OutputTuple,
    TradeEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "ManagerFeePercentageChanged(uint256)": TypedContractEvent<
      ManagerFeePercentageChangedEvent.InputTuple,
      ManagerFeePercentageChangedEvent.OutputTuple,
      ManagerFeePercentageChangedEvent.OutputObject
    >;
    ManagerFeePercentageChanged: TypedContractEvent<
      ManagerFeePercentageChangedEvent.InputTuple,
      ManagerFeePercentageChangedEvent.OutputTuple,
      ManagerFeePercentageChangedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProtocolFeePercentageChanged(uint256)": TypedContractEvent<
      ProtocolFeePercentageChangedEvent.InputTuple,
      ProtocolFeePercentageChangedEvent.OutputTuple,
      ProtocolFeePercentageChangedEvent.OutputObject
    >;
    ProtocolFeePercentageChanged: TypedContractEvent<
      ProtocolFeePercentageChangedEvent.InputTuple,
      ProtocolFeePercentageChangedEvent.OutputTuple,
      ProtocolFeePercentageChangedEvent.OutputObject
    >;

    "ReferralFeePercentageChanged(uint256)": TypedContractEvent<
      ReferralFeePercentageChangedEvent.InputTuple,
      ReferralFeePercentageChangedEvent.OutputTuple,
      ReferralFeePercentageChangedEvent.OutputObject
    >;
    ReferralFeePercentageChanged: TypedContractEvent<
      ReferralFeePercentageChangedEvent.InputTuple,
      ReferralFeePercentageChangedEvent.OutputTuple,
      ReferralFeePercentageChangedEvent.OutputObject
    >;

    "Trade(address,address,bool,uint256,uint256,uint256,uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      TradeEvent.InputTuple,
      TradeEvent.OutputTuple,
      TradeEvent.OutputObject
    >;
    Trade: TypedContractEvent<
      TradeEvent.InputTuple,
      TradeEvent.OutputTuple,
      TradeEvent.OutputObject
    >;
  };
}
